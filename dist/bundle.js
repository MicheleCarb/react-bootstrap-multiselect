'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var React = require('react');
var React__default = _interopDefault(React);
var $ = _interopDefault(require('jquery'));
var PropTypes = _interopDefault(require('prop-types'));

/* generated by gulpfile.js */
var getOptions = (function () {
  return ['allSelectedText', 'buttonClass', 'buttonContainer', 'buttonText', 'buttonTitle', 'buttonWidth', 'checkboxName', 'delimiterText', 'disableIfEmpty', 'disabledText', 'dropRight', 'dropUp', 'enableCaseInsensitiveFiltering', 'enableClickableOptGroups', 'enableCollapsibleOptGroups', 'enableFiltering', 'enableFullValueFiltering', 'enableHTML', 'filterBehavior', 'filterPlaceholder', 'includeFilterClearBtn', 'includeSelectAllIfMoreThan', 'includeSelectAllOption', 'inheritClass', 'maxHeight', 'nSelectedText', 'nonSelectedText', 'numberDisplayed', 'onChange', 'onDeselectAll', 'onDropdownHidden', 'onDropdownHide', 'onDropdownShow', 'onDropdownShown', 'onFiltering', 'onInitialized', 'onSelectAll', 'optionClass', 'optionLabel', 'preventInputChangeEvent', 'selectAllJustVisible', 'selectAllName', 'selectAllNumber', 'selectAllText', 'selectAllValue', 'selectedClass', 'templates'];
});

var classCallCheck = function (instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
};

var createClass = function () {
  function defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }

  return function (Constructor, protoProps, staticProps) {
    if (protoProps) defineProperties(Constructor.prototype, protoProps);
    if (staticProps) defineProperties(Constructor, staticProps);
    return Constructor;
  };
}();

var _extends = Object.assign || function (target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];

    for (var key in source) {
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }

  return target;
};

var inherits = function (subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      enumerable: false,
      writable: true,
      configurable: true
    }
  });
  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
};

var possibleConstructorReturn = function (self, call) {
  if (!self) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return call && (typeof call === "object" || typeof call === "function") ? call : self;
};

var MultiSelect = function (_Component) {
  inherits(MultiSelect, _Component);

  function MultiSelect(props) {
    classCallCheck(this, MultiSelect);

    var _this = possibleConstructorReturn(this, (MultiSelect.__proto__ || Object.getPrototypeOf(MultiSelect)).call(this, props));

    _this.$multiselect = null;
    _this.options = getOptions();
    return _this;
  }

  createClass(MultiSelect, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      this.$multiselect.multiselect(this.getOptionsFromProps());
      this.setOptionsFromProps();
      this.$multiselect.multiselect('dataprovider', this.props.data || []);
      if (this.props.disabled) {
        this.$multiselect.multiselect('disable');
      }
    }
  }, {
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(nextProps) {
      /*
      if (nextProps.options !== this.props.options) {
        this.setOptionsFromProps();
      }
      */
      if (nextProps.data !== this.props.data) {
        this.$multiselect.multiselect('dataprovider', nextProps.data || []);
      }
      if (nextProps.disabled) {
        this.$multiselect.multiselect('disable');
      } else {
        this.$multiselect.multiselect('enable');
      }
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      if (this.$multiselect) {
        this.$multiselect.multiselect('destroy');
      }
      this.$multiselect = null;
    }
  }, {
    key: 'syncData',
    value: function syncData() {
      // this function is meant to be called from parent component
      // in case selected values are changed outside of this component
      // and need to be synced

      // this function can not be called every time on this.render, because
      // dropdown would close after selecting first item

      if (this.$multiselect !== null) {
        this.$multiselect.multiselect('dataprovider', this.props.data || []);
      }
    }
  }, {
    key: 'getOptionsFromProps',
    value: function getOptionsFromProps() {
      var _this2 = this;

      var currentOptions = {};
      this.options.forEach(function (option) {
        if (_this2.props.hasOwnProperty(option)) {
          currentOptions[option] = _this2.props[option];
        }
      });
      return currentOptions;
    }
  }, {
    key: 'setOptionsFromProps',
    value: function setOptionsFromProps() {
      var currentOptions = this.getOptionsFromProps();
      if (this.$multiselect) {
        if (Object.keys(currentOptions).length) {
          this.$multiselect.multiselect('setOptions', currentOptions);
          this.$multiselect.multiselect('buildDropdown');
        }
      }
    }
  }, {
    key: 'render',
    value: function render() {
      var _this3 = this;

      //this.setOptionsFromProps();
      var options = getOptions();
      var props = {};
      for (var key in this.props) {
        if (this.props.hasOwnProperty(key) && options.indexOf(key) === -1) {
          props[key] = this.props[key];
        }
      }
      return React__default.createElement('select', _extends({}, props, { ref: function ref(select) {
          return _this3.$multiselect = $(select);
        } }));
    }
  }]);
  return MultiSelect;
}(React.Component);

MultiSelect.propTypes = {
  data: PropTypes.object.isRequired,
  disabled: PropTypes.bool,
  multiple: PropTypes.bool
};

exports.MultiSelect = MultiSelect;
exports.default = MultiSelect;
